/*
 * SchoolShootingThreatClassifierGUIView.java
 */

package schoolshootingthreatclassifiergui;

import Encryption.Decrypt;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import PresentingTheResult.SchoolShootingThreatClassifier;
import java.awt.Color;
import java.io.File;
import javax.swing.JFileChooser;
import PresentingTheResult.tools;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;


/**
 * The application's main frame.
 */
public class SchoolShootingThreatClassifierGUIView extends FrameView {

    public SchoolShootingThreatClassifierGUIView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
              
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
       

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                switch (propertyName) {
                    case "started":
                        if (!busyIconTimer.isRunning()) {
                            
                            busyIconIndex = 0;
                            busyIconTimer.start();
                        }
                        break;
                    case "done":
                        busyIconTimer.stop();
                        break;
                    case "message":
                        String text = (String)(evt.getNewValue());
                        messageTimer.restart();
                        break;
                    case "progress":
                        int value = (Integer)(evt.getNewValue());
                        break;
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SchoolShootingThreatClassifierGUIApp.getApplication().getMainFrame();
            aboutBox = new SchoolShootingThreatClassifierGUIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SchoolShootingThreatClassifierGUIApp.getApplication().show(aboutBox);
    }
@Action
    public void showHelpBox() {
        if (Help == null) {
            JFrame mainFrame = SchoolShootingThreatClassifierGUIApp.getApplication().getMainFrame();
            Help = new contents(mainFrame,true);
            Help.setLocationRelativeTo(mainFrame);
        }
        SchoolShootingThreatClassifierGUIApp.getApplication().show(Help);
    }
@Action
    public void changePassword() throws IOException {
        if (Password == null) {
            JFrame mainFrame = SchoolShootingThreatClassifierGUIApp.getApplication().getMainFrame();
            Password = new password(mainFrame,true);
            Password.setLocationRelativeTo(mainFrame);
        }
        SchoolShootingThreatClassifierGUIApp.getApplication().show(Password);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textInput = new javax.swing.JTextPane();
        submit = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        showDetails = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        detailedResultForTypeAThreat = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        errorMessage = new javax.swing.JLabel();
        result = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        googleErrorMessage = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cell = new javax.swing.JSpinner();
        googleEmail = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        GoogleClear = new javax.swing.JButton();
        GoogleSubmit = new javax.swing.JButton();
        msg = new javax.swing.JLabel();
        GoogleUrl = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        url = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        URLSubmit = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        URLclear = new javax.swing.JButton();
        URLerrorMessage = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pathName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        UploadDetailedresults = new javax.swing.JTextPane();
        Uploadsubmit = new javax.swing.JButton();
        Uploadclear = new javax.swing.JButton();
        UploadshowDetails = new javax.swing.JButton();
        Uploadbrowse = new javax.swing.JButton();
        uploadErrorMessage = new javax.swing.JLabel();
        uploadResults = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        authenticate = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        choice = new javax.swing.JComboBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextPane();
        jLabel16 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        open = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        pass = new javax.swing.JCheckBoxMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        help = new javax.swing.JCheckBoxMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(schoolshootingthreatclassifiergui.SchoolShootingThreatClassifierGUIApp.class).getContext().getResourceMap(SchoolShootingThreatClassifierGUIView.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        textInput.setToolTipText(resourceMap.getString("textInput.toolTipText")); // NOI18N
        textInput.setName("textInput"); // NOI18N
        jScrollPane1.setViewportView(textInput);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(schoolshootingthreatclassifiergui.SchoolShootingThreatClassifierGUIApp.class).getContext().getActionMap(SchoolShootingThreatClassifierGUIView.class, this);
        submit.setAction(actionMap.get("evaluateTheThreat")); // NOI18N
        submit.setText(resourceMap.getString("submit.text")); // NOI18N
        submit.setToolTipText(resourceMap.getString("submit.toolTipText")); // NOI18N
        submit.setName("submit"); // NOI18N

        clear.setAction(actionMap.get("evaluateAnotherThreat")); // NOI18N
        clear.setText(resourceMap.getString("clear.text")); // NOI18N
        clear.setToolTipText(resourceMap.getString("clear.toolTipText")); // NOI18N
        clear.setName("clear"); // NOI18N

        showDetails.setAction(actionMap.get("showDetails")); // NOI18N
        showDetails.setText(resourceMap.getString("showDetails.text")); // NOI18N
        showDetails.setToolTipText(resourceMap.getString("showDetails.toolTipText")); // NOI18N
        showDetails.setName("showDetails"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        detailedResultForTypeAThreat.setColumns(20);
        detailedResultForTypeAThreat.setRows(5);
        detailedResultForTypeAThreat.setToolTipText(resourceMap.getString("detailedResultForTypeAThreat.toolTipText")); // NOI18N
        detailedResultForTypeAThreat.setName("detailedResultForTypeAThreat"); // NOI18N
        jScrollPane2.setViewportView(detailedResultForTypeAThreat);

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        errorMessage.setText(resourceMap.getString("errorMessage.text")); // NOI18N
        errorMessage.setName("errorMessage"); // NOI18N

        result.setFont(resourceMap.getFont("result.font")); // NOI18N
        result.setText(resourceMap.getString("result.text")); // NOI18N
        result.setName("result"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(submit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(169, 169, 169))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(result))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(submit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showDetails)
                        .addGap(48, 48, 48)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(errorMessage)
                .addGap(55, 55, 55))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel5.setName("jPanel5"); // NOI18N

        googleErrorMessage.setText(resourceMap.getString("googleErrorMessage.text")); // NOI18N
        googleErrorMessage.setName("googleErrorMessage"); // NOI18N

        jLabel17.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel17.setForeground(resourceMap.getColor("jLabel17.foreground")); // NOI18N
        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        cell.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));
        cell.setToolTipText(resourceMap.getString("cell.toolTipText")); // NOI18N
        cell.setName("cell"); // NOI18N

        googleEmail.setToolTipText(resourceMap.getString("googleEmail.toolTipText")); // NOI18N
        googleEmail.setName("googleEmail"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setFont(resourceMap.getFont("jLabel11.font")); // NOI18N
        jLabel11.setForeground(resourceMap.getColor("jLabel11.foreground")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        GoogleClear.setText(resourceMap.getString("GoogleClear.text")); // NOI18N
        GoogleClear.setToolTipText(resourceMap.getString("GoogleClear.toolTipText")); // NOI18N
        GoogleClear.setName("GoogleClear"); // NOI18N

        GoogleSubmit.setAction(actionMap.get("GoogleSubmit")); // NOI18N
        GoogleSubmit.setText(resourceMap.getString("GoogleSubmit.text")); // NOI18N
        GoogleSubmit.setToolTipText(resourceMap.getString("GoogleSubmit.toolTipText")); // NOI18N
        GoogleSubmit.setName("GoogleSubmit"); // NOI18N

        msg.setText(resourceMap.getString("msg.text")); // NOI18N
        msg.setName("msg"); // NOI18N

        GoogleUrl.setToolTipText(resourceMap.getString("GoogleUrl.toolTipText")); // NOI18N
        GoogleUrl.setName("GoogleUrl"); // NOI18N

        jLabel12.setFont(resourceMap.getFont("jLabel12.font")); // NOI18N
        jLabel12.setForeground(resourceMap.getColor("jLabel12.foreground")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(GoogleClear)
                .addContainerGap(465, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cell, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GoogleUrl, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(msg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                            .addComponent(googleEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GoogleSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(264, 264, 264))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(googleErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(390, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(GoogleUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(googleEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GoogleSubmit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(msg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GoogleClear)
                .addGap(18, 18, 18)
                .addComponent(googleErrorMessage)
                .addGap(77, 77, 77))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        url.setText(resourceMap.getString("url.text")); // NOI18N
        url.setToolTipText(resourceMap.getString("url.toolTipText")); // NOI18N
        url.setName("url"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        email.setText(resourceMap.getString("email.text")); // NOI18N
        email.setToolTipText(resourceMap.getString("email.toolTipText")); // NOI18N
        email.setName("email"); // NOI18N

        URLSubmit.setAction(actionMap.get("URLSubmit")); // NOI18N
        URLSubmit.setText(resourceMap.getString("URLSubmit.text")); // NOI18N
        URLSubmit.setToolTipText(resourceMap.getString("URLSubmit.toolTipText")); // NOI18N
        URLSubmit.setName("URLSubmit"); // NOI18N

        message.setText(resourceMap.getString("message.text")); // NOI18N
        message.setName("message"); // NOI18N

        URLclear.setAction(actionMap.get("EnterAnotherURL")); // NOI18N
        URLclear.setText(resourceMap.getString("URLclear.text")); // NOI18N
        URLclear.setToolTipText(resourceMap.getString("URLclear.toolTipText")); // NOI18N
        URLclear.setName("URLclear"); // NOI18N

        URLerrorMessage.setText(resourceMap.getString("URLerrorMessage.text")); // NOI18N
        URLerrorMessage.setName("URLerrorMessage"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(URLclear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(URLerrorMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(url, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                                .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(URLSubmit))))
                .addGap(184, 184, 184))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(URLSubmit)
                    .addComponent(jLabel8)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(message)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(URLclear)
                .addGap(27, 27, 27)
                .addComponent(URLerrorMessage)
                .addContainerGap(136, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        pathName.setText(resourceMap.getString("pathName.text")); // NOI18N
        pathName.setName("pathName"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        UploadDetailedresults.setToolTipText(resourceMap.getString("UploadDetailedresults.toolTipText")); // NOI18N
        UploadDetailedresults.setName("UploadDetailedresults"); // NOI18N
        jScrollPane3.setViewportView(UploadDetailedresults);

        Uploadsubmit.setAction(actionMap.get("EvaluateThreatofAFile")); // NOI18N
        Uploadsubmit.setText(resourceMap.getString("Uploadsubmit.text")); // NOI18N
        Uploadsubmit.setToolTipText(resourceMap.getString("Uploadsubmit.toolTipText")); // NOI18N
        Uploadsubmit.setName("Uploadsubmit"); // NOI18N

        Uploadclear.setAction(actionMap.get("EvaluateAnotherThreat")); // NOI18N
        Uploadclear.setText(resourceMap.getString("Uploadclear.text")); // NOI18N
        Uploadclear.setToolTipText(resourceMap.getString("Uploadclear.toolTipText")); // NOI18N
        Uploadclear.setName("Uploadclear"); // NOI18N

        UploadshowDetails.setAction(actionMap.get("ShowDetails")); // NOI18N
        UploadshowDetails.setText(resourceMap.getString("UploadshowDetails.text")); // NOI18N
        UploadshowDetails.setToolTipText(resourceMap.getString("UploadshowDetails.toolTipText")); // NOI18N
        UploadshowDetails.setName("UploadshowDetails"); // NOI18N

        Uploadbrowse.setAction(actionMap.get("browse")); // NOI18N
        Uploadbrowse.setText(resourceMap.getString("Uploadbrowse.text")); // NOI18N
        Uploadbrowse.setToolTipText(resourceMap.getString("Uploadbrowse.toolTipText")); // NOI18N
        Uploadbrowse.setName("Uploadbrowse"); // NOI18N

        uploadErrorMessage.setText(resourceMap.getString("uploadErrorMessage.text")); // NOI18N
        uploadErrorMessage.setName("uploadErrorMessage"); // NOI18N

        uploadResults.setText(resourceMap.getString("uploadResults.text")); // NOI18N
        uploadResults.setName("uploadResults"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(uploadErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                            .addComponent(pathName, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(uploadResults, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Uploadclear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(UploadshowDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Uploadsubmit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(Uploadbrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(89, 89, 89))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathName)
                    .addComponent(Uploadbrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(uploadResults))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(uploadErrorMessage))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(Uploadsubmit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Uploadclear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UploadshowDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(134, 134, 134))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        jPanel4.setToolTipText(resourceMap.getString("jPanel4.toolTipText")); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N

        jLabel13.setFont(resourceMap.getFont("jLabel13.font")); // NOI18N
        jLabel13.setForeground(resourceMap.getColor("jLabel13.foreground")); // NOI18N
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        password.setText(resourceMap.getString("password.text")); // NOI18N
        password.setToolTipText(resourceMap.getString("password.toolTipText")); // NOI18N
        password.setName("password"); // NOI18N

        authenticate.setAction(actionMap.get("AuthenticateAdmin")); // NOI18N
        authenticate.setText(resourceMap.getString("authenticate.text")); // NOI18N
        authenticate.setToolTipText(resourceMap.getString("authenticate.toolTipText")); // NOI18N
        authenticate.setName("authenticate"); // NOI18N

        jLabel15.setFont(resourceMap.getFont("jLabel15.font")); // NOI18N
        jLabel15.setForeground(resourceMap.getColor("jLabel15.foreground")); // NOI18N
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        choice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "phrasesLinguisticMarkers", "markersLinguisticMarkers", "violenceLinguisticMarkers", "killLinguisticMarkers", "fightLinguisticMarkers", "group1LinguisticMarkers", "group2LinguisticMarkers", "negativeLinguisticMarkers", "slangsLinguisticMarkers", "dirtyWordsLinguisticMarkers", "symbolsLinguisticMarkers", "fightMotive", "hatesMotive", "depMotive", "havesMotive", "RevengeMotive", "ideologyMotive", "groupMotive", "relationMotive", "deathMotive", "breakupMotive", "bulliedMotive", "extremistsMotive", "martyrMotive", "failMotive", "placesRelatedToSchoolOnlySingular", "placesRelatedToSchoolOnlyPlural", "placesGenetiveCases", "placesDoubtfulBothSingularPlural", "prepositionOfPlaces", "mapsPlace", "knowledgeAboutPlaces", "weaponsPlace", "schoolRelatedVocabularyPlace", "rehearsalContinuousVerbs", "rehearsalPastAndPerfectVerbs", "torturedAnimalsVerbsRehearsal", "liveSpeciesRehearsal", "weaponsRehearsal", "pronousAsSubjectRehearsal", "popularNamesRehearsal", "killsArrayForSuicide", "myselfOurSelvesSuicide", "willShalForSuicide", "suicideVerbsWithWillShall", "nokillsSuicide", "killsArrayForSuicidePastAndPerfectTense", "previousAttemptsOfSuicide", "hateAndItsSynonmysSuicide", "hatesAllAndSocietySuicide", "groupSchoolRelatedSuicide", "relationSuicide", "deathSuicide", "breakupSuicide", "economicCrisisSuicide", "psychiatricMedicineNamesSuicide", "depressionAnxietySuicide", "surpassSuicide", "appreciateExSuicide", "ExSchooShootersSuicide", "terroristsSuicide", "murderersSuicide", "RevengeTarget", "phrasesIncludingTarget", "targetIndicatingFewPersons", "fightTarget", "killTarget", "cardinalNumbersTarget", "knowledgeFewTargets", "knowledgeMoreTargets", "subjectsTarget", "popularNamesTarget", "militaryTime", "civilianTime", "todayTime", "prepositionOfTime", "lunchTime", "wordsForCheckinPartOfTheDayTime", "cardinalNumbersTime", "monthsTime", "weekdayTime", "weekTime", "seasonTime", "subjectsTime", "weaponsWeapons", "accessToGunsPerfectTenseWeapons", "accessToGunsPerfectContinuousTenseWeapons", "accessToGunsPastTenseWeapons", "accessToGunsPresentTenseWeapons", "quantityOfGunsWeapons", "negativeHelpingVerbsWeapons", "willWeapons", "useWeapons", "completePhrasesWeapons", "buyWeapons", "relationsForGunWeapons", "HaveMoneyWeapons", "noMoneyWeapons", "friendWeapons", "borrowWeapons", "stealWeapons", "possessivePronousWeapons" }));
        choice.setToolTipText(resourceMap.getString("choice.toolTipText")); // NOI18N
        choice.setEnabled(false);
        choice.setName("choice"); // NOI18N

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        display.setName("display"); // NOI18N
        jScrollPane6.setViewportView(display);

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        update.setAction(actionMap.get("updateKnowledgeBase")); // NOI18N
        update.setText(resourceMap.getString("update.text")); // NOI18N
        update.setToolTipText(resourceMap.getString("update.toolTipText")); // NOI18N
        update.setName("update"); // NOI18N

        open.setAction(actionMap.get("displayDatabase")); // NOI18N
        open.setText(resourceMap.getString("open.text")); // NOI18N
        open.setToolTipText(resourceMap.getString("open.toolTipText")); // NOI18N
        open.setName("open"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(update))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(choice, 0, 291, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(open))
                        .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(authenticate))))
                .addGap(92, 92, 92))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authenticate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(open)
                    .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        pass.setAction(actionMap.get("changePassword")); // NOI18N
        pass.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        pass.setText(resourceMap.getString("pass.text")); // NOI18N
        pass.setToolTipText(resourceMap.getString("pass.toolTipText")); // NOI18N
        pass.setName("pass"); // NOI18N
        fileMenu.add(pass);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setToolTipText(resourceMap.getString("helpMenu.toolTipText")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        help.setAction(actionMap.get("showHelpBox")); // NOI18N
        help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        help.setText(resourceMap.getString("help.text")); // NOI18N
        help.setToolTipText(resourceMap.getString("help.toolTipText")); // NOI18N
        help.setName("help"); // NOI18N
        helpMenu.add(help);

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    
    //Actions of Tabbed Pane "Type A Threat"
    
    @Action
    public void evaluateTheThreat() throws IOException {
        if(textInput.getText().isEmpty())
        {
            errorMessage.setText("error: text not selected");
            errorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            errorMessage.setForeground(Color.RED);
            return;
        }
        
        inp=new SchoolShootingThreatClassifier();
        String paragraph=textInput.getText();
        String res=inp.getResults(paragraph);
        result.setText(res);
        switch (res) {
            case "HIGH":
                result.setForeground(Color.RED);
                result.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
            case "MEDIUM":
                result.setForeground(Color.ORANGE);
                result.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
            case "LOW":
                result.setForeground(Color.GREEN);
                result.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
            case "NOT A THREAT":
                result.setForeground(Color.BLACK);
                result.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
        }
        errorMessage.setText("");
    }

    @Action
    public void evaluateAnotherThreat() {
        textInput.setText("");
        result.setText("");
        detailedResultForTypeAThreat.setText("");
        errorMessage.setText("");
    }

    @Action
    public void showDetails() throws IOException {
        if(textInput.getText().isEmpty())
        {
            errorMessage.setText("error: text not selected");
            errorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            errorMessage.setForeground(Color.RED);
            return;
        }
        
        inp=new SchoolShootingThreatClassifier();
        String paragraph=textInput.getText();
        detailedResultForTypeAThreat.setText(inp.getDetailedResults(paragraph));
        errorMessage.setText("");
    }

    //Actions of the Tabbed Pane "Evaluate Threats from Google Sheet"

    @Action
    public void GoogleSubmit() throws IOException {
        if(GoogleUrl.getText().isEmpty())
        {
            googleErrorMessage.setText("error: please enter a valid URL");
            googleErrorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            googleErrorMessage.setForeground(Color.RED);
            return;
        }
        else if(googleEmail.getText().isEmpty())
        {
            googleErrorMessage.setText("error: please enter a valid email");
            googleErrorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            googleErrorMessage.setForeground(Color.RED);
            return;
        }
        
        int t=(int)((Integer)cell.getValue());
        inp=new SchoolShootingThreatClassifier();
        inp.goToExcelSheet(t+"", GoogleUrl.getText(), googleEmail.getText());
        msg.setText("Email with an attachment containing the results sent");
        msg.setFont(new Font(Font.SERIF,Font.BOLD,14));
        googleErrorMessage.setText("");
    }

    @Action
    public void clearGoogleUrl() {
        GoogleUrl.setText("");
        googleErrorMessage.setText("");
        msg.setText("");
    }
    
    //Actions of the Tabbed Pane "Enter Website Address"

    @Action
    public void URLSubmit() throws MalformedURLException, IOException {
        if(url.getText().isEmpty())
        {
            googleErrorMessage.setText("error: please enter a valid URL");
            googleErrorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            googleErrorMessage.setForeground(Color.RED);
            return;
        }
        else if(email.getText().isEmpty())
        {
            googleErrorMessage.setText("error: please enter a valid email");
            googleErrorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            googleErrorMessage.setForeground(Color.RED);
            return;
        }
                inp=new SchoolShootingThreatClassifier();
                inp.goToURL(email.getText(), url.getText());
                message.setText("Email with an attachment containing the results sent");
                message.setFont(new Font(Font.SERIF,Font.BOLD,14));
                URLerrorMessage.setText("");

    }

    @Action
    public void EnterAnotherURL() {
        url.setText("");
         message.setText("");
         URLerrorMessage.setText("");
    }
    
    //Actions of the Tabbed Pane "Upload a File"

    @Action
    public void browse() throws FileNotFoundException, IOException {
        JFileChooser jfc=new JFileChooser();
        jfc.setDialogTitle("Select File");
        jfc.showOpenDialog(SchoolShootingThreatClassifierGUIApp.getApplication().getMainFrame());
        file=jfc.getSelectedFile();
        if(file==null)
        {
            uploadErrorMessage.setText("error: file not selected");
            uploadErrorMessage.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            uploadErrorMessage.setForeground(Color.RED);
            return;
        }
        pathName.setText(file.getPath());
        uploadErrorMessage.setText("");
    }

    @Action
    public void EvaluateThreatofAFile() throws FileNotFoundException, IOException {
        inp=new SchoolShootingThreatClassifier();
        String paragraph=tools.FileToString(file);
        String res=inp.getResults(paragraph);
        uploadResults.setText(res);
        switch (res) {
            case "HIGH":
                uploadResults.setForeground(Color.RED);
                uploadResults.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
            case "MEDIUM":
                uploadResults.setForeground(Color.ORANGE);
                uploadResults.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
            case "LOW":
                uploadResults.setForeground(Color.GREEN);
                uploadResults.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
            case "NOT A THREAT":
                uploadResults.setForeground(Color.BLACK);
                uploadResults.setFont(new Font(Font.SERIF,Font.BOLD,14));
                break;
        }
        uploadErrorMessage.setText("");
    }

    @Action
    public void EvaluateAnotherThreat() {
     file=null;
     pathName.setText("");
     uploadErrorMessage.setText("");
     UploadDetailedresults.setText("");
     uploadResults.setText("");
    }

    @Action
    public void ShowDetails() throws FileNotFoundException, IOException {
        inp=new SchoolShootingThreatClassifier();
        String paragraph=tools.FileToString(file);
        UploadDetailedresults.setText(inp.getDetailedResults(paragraph));
        uploadErrorMessage.setText("");
    }
    
    //Actions of the Tabbed Pane "Make Changes to Knowledge Base of the Program"

    @Action
    public void AuthenticateAdmin() throws IOException {
        Decrypt d=new Decrypt();
        File f= new File("password.DAT");
        if(f.exists()==false)
        {
            jLabel16.setText("error: knowledge base is locked down for security reasons");
            jLabel16.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            jLabel16.setForeground(Color.RED);
            return;
        }
        FileReader fr=new FileReader(f);
        BufferedReader br= new BufferedReader(fr);
        String read=br.readLine();
        String admin=d.Decrypt(read);
        if(String.valueOf(password.getPassword()).equals(admin)) //Change the password as required
        {
            choice.setEnabled(true);
            open.setEnabled(true);
            update.setEnabled(true);
            jLabel16.setText("");
        }
        else
        {
            jLabel16.setText("error: authentication failure!");
            jLabel16.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            jLabel16.setForeground(Color.RED);
            return;
        }
    }

    @Action
    public void displayDatabase() throws FileNotFoundException, IOException {
        if(choice.getSelectedIndex()==0)
        {
            jLabel16.setText("error: knowledge base not selected");
            jLabel16.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            jLabel16.setForeground(Color.RED);
            return;
        }
        String ch=(String) choice.getSelectedItem();
        arrayInUse=ch;
        if(ch.contains("LinguisticMarkers") || ch.contains("LinguisticMarkers".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new LinguisticMarkersDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Motive")|| ch.contains("Motive".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new MotiveDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Place")|| ch.contains("Place".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new PlaceDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Rehearsal")|| ch.contains("Rehearsal".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new RehearsalDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Suicide")|| ch.contains("Suicide".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new SuicideAndHatredDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Target")|| ch.contains("Target".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new TargetDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Time")|| ch.contains("Time".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new TimeDetectorPackage.databaseConnector()).fetch(ch)));
        }
        else if(ch.contains("Weapons")|| ch.contains("Weapons".toLowerCase()))
        {
            display.setText(tools.ArrayToString((new WeaponsDetectorPackage.databaseConnector()).fetch(ch)));
        }
        jLabel16.setText("");
    }

    @Action
    public void updateKnowledgeBase() throws IOException {
        if(choice.getSelectedIndex()==0 )
        {
            jLabel16.setText("error: knowledge base not selected");
            jLabel16.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            jLabel16.setForeground(Color.RED);
            return;
        }
        else if(display.getText().isEmpty()|| arrayInUse.isEmpty())
        {
            jLabel16.setText("error: nothing to update to the selected knowledge base");
            jLabel16.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            jLabel16.setForeground(Color.RED);
            return;
        }
        else if(((String) choice.getSelectedItem()).equals(arrayInUse)==false)
        {
            jLabel16.setText("error: you are about to corrupt the knowledge base :"+(String) choice.getSelectedItem());
            jLabel16.setFont(new Font(Font.DIALOG,Font.PLAIN,14));
            jLabel16.setForeground(Color.RED);
            return;
        }
        String ch=(String) choice.getSelectedItem();
        String temp=display.getText();
        temp=temp.substring(0,temp.length()-1);
        display.setText(temp);
        if(ch.contains("LinguisticMarkers")|| ch.contains("Motive".toLowerCase()))
        {
            (new LinguisticMarkersDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        else if(ch.contains("Motive")|| ch.contains("Motive".toLowerCase()))
        {
            (new MotiveDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        else if(ch.contains("Place")|| ch.contains("Place".toLowerCase()))
        {
            (new PlaceDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        else if(ch.contains("Rehearsal")|| ch.contains("Rehearsal".toLowerCase()))
        {
            (new RehearsalDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        else if(ch.contains("Suicide")|| ch.contains("Suicide".toLowerCase()))
        {
            (new SuicideAndHatredDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        else if(ch.contains("Target")|| ch.contains("Target".toLowerCase()))
        {
            (new TargetDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        else if(ch.contains("Time")|| ch.contains("Time".toLowerCase()))
        {
            (new TimeDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
            
        }
        else if(ch.contains("Weapons")|| ch.contains("Weapons".toLowerCase()))
        {
           (new WeaponsDetectorPackage.databaseConnector()).upload(ch, (display.getText()).split(","));
        }
        jLabel16.setText("");
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GoogleClear;
    private javax.swing.JButton GoogleSubmit;
    private javax.swing.JTextField GoogleUrl;
    private javax.swing.JButton URLSubmit;
    private javax.swing.JButton URLclear;
    private javax.swing.JLabel URLerrorMessage;
    private javax.swing.JTextPane UploadDetailedresults;
    private javax.swing.JButton Uploadbrowse;
    private javax.swing.JButton Uploadclear;
    private javax.swing.JButton UploadshowDetails;
    private javax.swing.JButton Uploadsubmit;
    private javax.swing.JButton authenticate;
    private javax.swing.JSpinner cell;
    private javax.swing.JComboBox choice;
    private javax.swing.JButton clear;
    private javax.swing.JTextArea detailedResultForTypeAThreat;
    private javax.swing.JTextPane display;
    private javax.swing.JTextField email;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JTextField googleEmail;
    private javax.swing.JLabel googleErrorMessage;
    private javax.swing.JCheckBoxMenuItem help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel message;
    private javax.swing.JLabel msg;
    private javax.swing.JButton open;
    private javax.swing.JCheckBoxMenuItem pass;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel pathName;
    private javax.swing.JLabel result;
    private javax.swing.JButton showDetails;
    private javax.swing.JButton submit;
    private javax.swing.JTextPane textInput;
    private javax.swing.JButton update;
    private javax.swing.JLabel uploadErrorMessage;
    private javax.swing.JLabel uploadResults;
    private javax.swing.JTextField url;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    private JDialog Help;
    private JDialog Password;
    
    private SchoolShootingThreatClassifier inp;
    private File file;
    private String arrayInUse="";
}
